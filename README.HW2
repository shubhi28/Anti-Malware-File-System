						CSE506-FALL 2015 Homework 2
		 				Name: Shubhi Rani
						ID: 110455118

* INTRODUCTION
================
In this assignment I have implemented "AMFS" stackable file system.
I have replaced "wrapfs" stackable filesystem with amfs as a starting point
and further added anti-malware support to detect and prevent, for example, 
virus patterns in files.

*BUILD AND INSTALL AMFS MODULE
===============================
The AMFS file system is build as module. Thee following changes are
done to install the module.
1. The magic number is added in include/uapi/linux/magic.h file 
	#define AMFS_SUPER_MAGIC        0xb550ca11

2.Added entry in Makefile and Kconfig of 'fs' folder. 

3.install_module.sh script file :I have made a script which installs 
and mounts the AMFS filesystem at /mnt/amfs. The file is kept at 
fs/amfs/install_module.sh


*DESIGN AND IMPLEMETATION
===========================
Following features are supported for AMFS Stackable FileSystem.

A. MOUNT OPTIONS:
------------------
The mount option is modified add '-o' option which takes the pattern db 
file path. The mount option is given as-
	mount -t amfs -o pattdb=/mypatterns.db /some/lower/path /mnt/amfs
All the error conditions are handled in case wrong arguments are passed
to mount AMFS.

B. IOCTL:
---------
Ioctl interface has been added to manage the pattern DB file.
The user land code is wriiten in amfsctl.c file.
1. To list known patterns
$ ./amfsctl -l /mnt/amfs

2. To add a new pattern
$ ./amfsctl -a "newpatt" /mnt/amfs

3. To remove an old pattern
$ ./amfsctl -r "oldpatt" /mnt/amfs

The length of bad pattern is assumed to be 256 characters

C. LINK LIST:
---------------
All the patterns are stored using kernel data structure implemeted in 
linux/list.h. THe link are stored in super block private data. The
data structures to store link list is
	/* pattern list data in memory*/
	struct amfs_patterndb_list {
        	char *pattern;
        	struct list_head pattern_list;
	};

The amfs_sb_info structure is modified to add link list and filename 
of pattern db file.
	/* amfs super-block data in memory */
	struct amfs_sb_info {
        	struct super_block *lower_sb;
			/* link list to store pattern */
        	struct amfs_patterndb_list *pattern_list_sb;
        	char *file_sb; /* file name of pattern db file*/
			/* Timestamp is updated whenver patterndb is modifed*/
		time_t version_sb;
	};


D. EXTENTED ATTRIBUTES and VERSIONING:
--------------------------------------
I have added EAs to mark file as 'GOOD' or 'BAD'.
The file is considered to be bad when the AMFS_XATTR_FILE_STATUS is set as
bad ie 'B' and AMFS_XATTR_FILE_VERSION matches the version_sb member of
struct amfs_sb_info which is super block private data.

Wherver a bad pattern is removed or added, the version_sb in super block
private data is modified. Hence the file needs to be 're-scanned' to 
check if its infected with virus or not.
This way I have supported 'Versioning'.


E. HANDLING BORDER CASE WHILE STORING PATTERNDB FILE:
-----------------------------------------------------
I have successfully handled the case in which patterns are not
delimited by \n at the PAGE_SIZE offset. Hence handling the border cases
while storing patterns.


F. READING AND WRITING FILE:
----------------------------
Whenever a bad pattern is found while reading, further reads are prohibited.
Whenver a user tries to write a bad pattern in a file , write operation is 
cancelled hence'avoiding' writes of 'bad' patterns. Lookup function as also
modified to check for bad files.

Also it is not allowed to copy any bad file. However deleting a bad file is 
supported.


G. LISTING OF BAD FILE:
-----------------------
When a file is marked 'BAD', it will not be listed in the directory.
For, this I have modified readdir function and implemeted a new method 
amfs_filldir. The structure added to support directory reads is as
follows:
	struct amfs_getdents_callback {
        	struct dir_context ctx;
        	struct dir_context *caller;
        	struct super_block *sb;
        	int filldir_called;
        	int entries_written;
	};
The reference is taken from ecryptfs file system.

 
* EXTRA CREDIT
================
I have disbaled macro in "amfs.h" file
	#define EXTRA_CREDIT 1
To enable, uncomment the above line amfs.h file

A. OPEN FILE SCAN, TRI-STATE BAD STATUS:
-----------------------------------------
I have modified code in amfs_open to add the support for tri-state file 
status.
When a bad pattern is found, its considered to 'BAD'.
If no bad pattern is found, its consideredto be 'GOOD'.
Else, the status of file is 'UNKNOWN'.

B. HANDLING BAD PATTERN ON BOUNDARY OF TWO USER BUFFER:
--------------------------------------------------------
Handling the case in which bad pattern lies at the border of two user
buffers.
